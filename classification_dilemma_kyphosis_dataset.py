# -*- coding: utf-8 -*-
"""Classification Dilemma Kyphosis Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K15dOzFDwco2tXiuwCnvs86089oD_nyO

# CLASSIFING KYPHOSIS DISEASE USING:

*   DECISION TREES CLASSIFIER
*   RANDOM FOREST CLASSIFIER
*   LOGISTIC REGRESSION
*   SUPPORT VECTOR MACHINES


Data source: https://www.kaggle.com/abbasit/kyphosis-dataset

Data INPUTS: 
* Age: in months
* Number: the number of vertebrae involved
*  Start: the number of the first (topmost) vertebra operated on.

Data OUTPUTS:
*  Kyphosis: a factor with levels absent present indicating if a kyphosis (a type of deformation) was present after the operation.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # for data manipulation using dataframes
import numpy as np # for data statistical analysis 
import matplotlib.pyplot as plt # for data visualisation
import seaborn as sns # for statistical data visualization
# %matplotlib inline

kyphosis_df = pd.read_csv("kyphosis.csv")

kyphosis_df.head(5)

kyphosis_df.info()

kyphosis_df.describe()

kyphosis_df.corr()

kyphosis_df.keys()

# data visualization
sns.countplot(kyphosis_df['Kyphosis'], label = "Count")

# data visualization
sns.pairplot(kyphosis_df, hue = 'Kyphosis')

# notes: [Kyphosis] labels are categorical values
kyphosis_df['Kyphosis'].unique()

# converting categorical values into numerical values.

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
LabelEncoder_y = LabelEncoder()
kyphosis_df['Kyphosis'] = LabelEncoder_y.fit_transform(kyphosis_df['Kyphosis'])

kyphosis_df.head()

# notes: [Kyphosis] labels were converted into numerical values
kyphosis_df['Kyphosis'].unique()

plt.figure(figsize=(15,5))

plt.subplot(1,3,1)
sns.violinplot(x='Kyphosis',y='Age',data=kyphosis_df);
sns.swarmplot(x="Kyphosis", y="Age", data=kyphosis_df, size=4, color="k", alpha=0.3);

plt.subplot(1,3,2)
sns.violinplot(x='Kyphosis',y='Number',data=kyphosis_df);
sns.swarmplot(x="Kyphosis", y="Number", data=kyphosis_df, size=4, color="k", alpha=0.3);

plt.subplot(1,3,3)
sns.violinplot(x='Kyphosis',y='Start',data=kyphosis_df);
sns.swarmplot(x="Kyphosis", y="Start", data=kyphosis_df, size=4, color="k", alpha=0.3);

plt.figure(figsize = (7, 7))
sns.heatmap(kyphosis_df.corr(), annot=True, cmap="viridis", fmt="0.2f");

# testing and training dataset
X = kyphosis_df.drop(['Kyphosis'],axis=1)
y = kyphosis_df['Kyphosis']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

"""### DECISION TREE CLASSIFIER"""

from sklearn.tree import DecisionTreeClassifier
decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train,y_train)

# checking which feature has the highest impact for result
feature_importances_decision_tree = pd.DataFrame(decision_tree.feature_importances_,
                                   index = X_train.columns,
                                    columns=['importance']).sort_values('importance',ascending=False)

feature_importances_decision_tree

# model evaluation
from sklearn.metrics import classification_report, confusion_matrix

y_predict_train = decision_tree.predict(X_train)
y_predict_train
cm = confusion_matrix(y_train, y_predict_train)
sns.heatmap(cm, annot=True)

y_predict_test = decision_tree.predict(X_test)
cm = confusion_matrix(y_test, y_predict_test)
sns.heatmap(cm, annot=True)

print(classification_report(y_test, y_predict_test))

"""### RANDOM FOREST CLASSIFIER"""

from sklearn.ensemble import RandomForestClassifier
RandomForest = RandomForestClassifier(n_estimators=150)
RandomForest.fit(X_train, y_train)

y_predict_train = RandomForest.predict(X_train)
y_predict_train
cm = confusion_matrix(y_train, y_predict_train)
sns.heatmap(cm, annot=True)

y_predict_test = RandomForest.predict(X_test)
cm = confusion_matrix(y_test, y_predict_test)
sns.heatmap(cm, annot=True)

print(classification_report(y_test, y_predict_test))

"""### LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression
LogisticReg = LogisticRegression(random_state = 0)
LogisticReg.fit(X_train, y_train)

y_predict_train = LogisticReg.predict(X_train)
y_predict_train
cm = confusion_matrix(y_train, y_predict_train)
sns.heatmap(cm, annot=True)

y_predict_test = LogisticReg.predict(X_test)
cm = confusion_matrix(y_test, y_predict_test)
sns.heatmap(cm, annot=True)

print(classification_report(y_test, y_predict_test))

"""### SVM"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=5)

from sklearn.svm import SVC 
from sklearn.metrics import classification_report, confusion_matrix

svc_model = SVC()
svc_model.fit(X_train, y_train)

y_predict_train = svc_model.predict(X_train)
y_predict_train
cm = confusion_matrix(y_train, y_predict_train)
sns.heatmap(cm, annot=True)

y_predict_test = svc_model.predict(X_test)
cm = confusion_matrix(y_test, y_predict_test)
sns.heatmap(cm, annot=True)

print(classification_report(y_test, y_predict_test))

# In the case of using SVM try to improve model using scaled data

min_train = X_train.min()
min_train

range_train = (X_train - min_train).max()
range_train

X_train_scaled = (X_train - min_train)/range_train

y_train

min_test = X_test.min()
range_test = (X_test - min_test).max()
X_test_scaled = (X_test - min_test)/range_test

y_test

from sklearn.svm import SVC 
from sklearn.metrics import classification_report, confusion_matrix

svc_model = SVC()
svc_model.fit(X_train_scaled, y_train)

y_predict = svc_model.predict(X_test_scaled)
cm = confusion_matrix(y_test, y_predict)

sns.heatmap(cm,annot=True,fmt="d")

print(classification_report(y_test,y_predict))

# improving model using GridSearch

param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001], 'kernel': ['rbf']}

from sklearn.model_selection import GridSearchCV

grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=4)

grid.fit(X_train_scaled,y_train)

grid.best_params_

grid.best_estimator_

grid_predictions = grid.predict(X_test_scaled)

cm = confusion_matrix(y_test, grid_predictions)

sns.heatmap(cm, annot=True)

print(classification_report(y_test,grid_predictions))